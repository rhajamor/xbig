<?xml version="1.0" encoding="UTF-8"?>
<!--
  
  This source file is part of XBiG
  (XSLT Bindings Generator)
  For the latest info, see http://sourceforge.net/projects/xbig
  
  Copyright (c) 2006 The XBiG Development Team
  Also see acknowledgements in Readme.html
  
  This program is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.
  
  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along with
  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
  Place - Suite 330, Boston, MA 02111-1307, USA, or go to
  http://www.gnu.org/copyleft/lesser.txt.
  
  Author: Frank Bielig
          Christoph Nenning
  
-->

<!DOCTYPE DaemonConfig [
  <!ENTITY cppFileHeader SYSTEM "cpp2j/etc/cpp_header.inc">
  <!ENTITY javaFileHeader SYSTEM "cpp2j/etc/java_header.inc">
  <!ENTITY javaClassContent SYSTEM "cpp2j/etc/java_class_content.inc">
]>

<config>

	<meta>
		<signatures>

			<!-- mapping of basic types -->

			<type meta="void" signature="v" />
			<type meta="bool" signature="b" />

			<type meta="char" signature="c" />
			<type meta="signed char" signature="b" />
			<type meta="unsigned char" signature="B" />

			<type meta="short" signature="h" />
			<type meta="short int" signature="h" />
			<type meta="signed short" signature="h" />
			<type meta="signed short int" signature="h" />
			<type meta="unsigned short" signature="H" />
			<type meta="unsigned short int" signature="H" />

			<type meta="int" signature="i" />
			<type meta="signed" signature="i" />
			<type meta="signed int" signature="i" />
			<type meta="unsigned" signature="I" />
			<type meta="unsigned int" signature="I" />

			<type meta="long" signature="l" />
			<type meta="long int" signature="l" />
			<type meta="signed long" signature="l" />
			<type meta="signed long int" signature="l" />
			<type meta="unsigned long" signature="L" />
			<type meta="unsigned long int" signature="L" />

			<type meta="long long" signature="o" />
			<type meta="signed long long" signature="o" />
			<type meta="unsigned long long" signature="O" />

			<type meta="double" signature="D" />
			<type meta="float" signature="F" />

			<type meta="std::string" signature="s" />
			<type meta="std::wstring" signature="ws" />
			<type meta="size_t" signature="i" />
			<type meta="wchar_t" signature="H" />
			<type meta="time_t" signature="l" />

			<!-- mapping of non-const passing methods for parameters -->

			<pass meta="reference" signature="r" />
			<pass meta="pointer" signature="p" />
			<pass meta="value" signature="v" />
			<pass meta="array" signature="a" />

			<!-- mapping of constant passing methods for parameters -->

			<const-pass meta="reference" signature="R" />
			<const-pass meta="pointer" signature="P" />
			<const-pass meta="value" signature="V" />
			<const-pass meta="array" signature="A" />

		</signatures>

		<method>
			<name>
				<prefix>_</prefix>
				<suffix></suffix>
			</name>
		</method>

		<constructor>
			<name>
				<prefix>__create</prefix>
				<suffix></suffix>
			</name>
		</constructor>

		<destructor>
			<name>__delete</name>
		</destructor>

		<publicattribute>
			<get>get</get>
			<set>set</set>
		</publicattribute>

		<parameter>
			<defaultName>a</defaultName>
			<rename meta="_min">min</rename>
			<rename meta="_max">max</rename>
		</parameter>

		<globalmember>
			<classNameForGlobalMember>GlobalUtility
			</classNameForGlobalMember>
		</globalmember>

	</meta>

	<cpp>
		<format>
			<indent>&#10;&#32;&#32;</indent>
    </format>

	<always_include>
		<header>Ogre4JStableHeaders.h</header>
	</always_include>

    <variables>
      <jni>
        <environment name="_jni_env_" />
        <class name="_jni_class_" />
        <object name="_jni_this_" />
        <pointer name="_jni_pointer_" />
        <attributevalue name="_jni_value_" />
      </jni>
      <cpp>
        <result name="_cpp_result" />
        <object name="_cpp_this" />
        <prefix name="_cpp_" />
        <suffix name="" />
      </cpp>
    </variables>

    <method>
      <constructor>
        ![CDATA[
        #nl#
        // constructor of class #cpp_class#
        #nl# #nl#
        // parameter conversions
        #cpp_conversions# 
        #nl# #nl#
        // create new instance of class #cpp_class#
        #nl#
        #cpp_class#* #cpp_this# = new #cpp_class#(#cpp_params#);
        #nl# #nl#
        // return casted pointer
        #nl#
        jlong #jni_pointer# = reinterpret_cast&lt;jlong&gt;(#cpp_this#);
        #nl#
        return #jni_pointer#;
        ]]
      </constructor>

      <destructor>
        ![CDATA[
        #nl#
        // destructor of class #cpp_class#
        #nl#
        // cast pointer to C++ object
        #nl#
        #cpp_class#* #cpp_this# = reinterpret_cast&lt;#cpp_class#*&gt;(#jni_pointer#);
        #nl#
        // delete object if it exists
        #nl#
        if(#cpp_this# != NULL)
        	delete #cpp_this#;
        ]]
      </destructor>

      <static>
        <void>
          ![CDATA[
          #nl#
          // static method of class #cpp_class# without return value
          #nl#
          // parameter conversions
          #cpp_conversions#
          #nl# #nl#
          // call library method
          #nl#
          #cpp_class#::#cpp_method#(#cpp_params#);
          ]]
        </void>
        <return>
          ![CDATA[
          #nl#
          // static method of class #cpp_class# with return value
          #nl#
          // parameter conversions
          #cpp_conversions#
          #nl# #nl#
          // call library method
          #nl#
          #cpp_return_type# #cpp_return_var# = #optional_return_conversion# #cpp_class#::#cpp_method#(#cpp_params#)#optional_closing_bracket#;
          #nl#
          return #cpp_return#;
          ]]
        </return>
      </static>

      <normal>
        <void>
          ![CDATA[
          #nl#
          // parameter conversions #cpp_conversions#
          #nl# #nl#
          // cast pointer to C++ object
          #nl#
          #cpp_class#* #cpp_this# = reinterpret_cast&lt;#cpp_class#*&gt;(#jni_pointer#);
          #nl# #nl#
          // call library method
          #nl#
          #cpp_this#->#cpp_method#(#cpp_params#);
          ]]
        </void>
        <return>
          ![CDATA[
          #nl#
          // parameter conversions #cpp_conversions#
          #nl# #nl#
          // cast pointer to C++ object
          #nl#
          #cpp_class#* #cpp_this# = reinterpret_cast&lt;#cpp_class#*&gt;(#jni_pointer#);
          #nl# #nl#
          // call library method
          #nl#
          #cpp_return_type# #cpp_return_var# = #optional_return_conversion# #cpp_this#->#cpp_method#(#cpp_params#) #optional_closing_bracket#;
          #nl#
          return #cpp_return#;
          ]]
        </return>
      </normal>

      <publicattribute>
        <get>
          <static>
            ![CDATA[
            #nl#
            // parameter conversions
            #cpp_conversions#
            #nl# #nl#
            // call library method
            #nl#
            #cpp_return_type# #cpp_return_var# = #optional_return_conversion# #cpp_class#::#cpp_attribute# #optional_closing_bracket#;
            #nl#
            return #cpp_return#;
            ]]
          </static>
          <nonstatic>
            ![CDATA[
            #nl#
            // parameter conversions
            #cpp_conversions#
            #nl# #nl#
            // cast pointer to C++ object
            #nl#
            #cpp_class#* #cpp_this# = reinterpret_cast&lt;#cpp_class#*&gt;(#jni_pointer#);
            #nl# #nl#
            // call library method
            #nl#
            #cpp_return_type# #cpp_return_var# = #optional_return_conversion# #cpp_this#->#cpp_attribute##optional_closing_bracket#;
            #nl#
            return #cpp_return#;
            ]]
          </nonstatic>
        </get>
        <set>
          <static>
            ![CDATA[
            #nl#
            // parameter conversions
            #cpp_conversions#
            #nl# #nl#
            // call library method
            #nl#
            #cpp_class#::#cpp_attribute# = #cpp_params#;
            ]]
          </static>
          <nonstatic>
            ![CDATA[
            #nl#
            // parameter conversions
            #cpp_conversions#
            #nl# #nl#
            // cast pointer to C++ object
            #nl#
            #cpp_class#* #cpp_this# =reinterpret_cast&lt;#cpp_class#*&gt;(#jni_pointer#);
            #nl# #nl#
            // call library method
            #nl#
            #cpp_this#->#cpp_attribute# = #cpp_params#;
            ]]
          </nonstatic>
        </set>
      </publicattribute>

    </method>

    <jni>
      <signatures>

        <type meta="void" signature="V" />
        <type meta="boolean" signature="Z" />
        <type meta="bool" signature="Z" />

        <type meta="char" signature="C" />
        <type meta="signed char" signature="C" />
        <type meta="unsigned char" signature="C" />

        <type meta="short" signature="S" />
				<type meta="short int" signature="S" />
        <type meta="signed short" signature="S" />
				<type meta="signed short int" signature="S" />
        <type meta="unsigned short" signature="S" />
				<type meta="unsigned short int" signature="S" />

        <type meta="int" signature="I" />
				<type meta="signed" signature="I" />
        <type meta="signed int" signature="I" />
				<type meta="unsigned" signature="I" />
        <type meta="unsigned int" signature="I" />

        <type meta="long" signature="J" />
				<type meta="long int" signature="J" />
        <type meta="signed long" signature="J" />
				<type meta="signed long int" signature="J" />
        <type meta="unsigned long" signature="J" />
				<type meta="unsigned long int" signature="J" />

				<type meta="long long" signature="J" />
				<type meta="signed long long" signature="J" />
				<type meta="unsigned long long" signature="Lorg/xbig/base/ULongLong;" />
				
        <type meta="double" signature="D" />
        <type meta="float" signature="F" />

        <type meta="object" signature="L" />
        <type meta="std::string" signature="Ljava/lang/String;" />
        <type meta="std::wstring" signature="Ljava/lang/String;" />
        <type meta="byte" signature="B" />
        <type meta="array" signature="[" />
        <type meta="size_t" signature="I" />
        <type meta="wchar_t" signature="S" />
        <type meta="time_t" signature="J" />
      </signatures>

      <types>
        <type meta="void" jni="void" />
        <type meta="void" pass="pointer" jni="jlong"
          cpp="void*">
          <jni2cpp>
            reinterpret_cast&lt;void*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="void" pass="reference" jni="jlong"
          cpp="void*" returntype="void&amp;">
          <jni2cpp>
            reinterpret_cast&lt;void*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>

        <type meta="bool" pass="pointer" jni="jlong"
          cpp="bool*">
          <jni2cpp>
            reinterpret_cast&lt;bool*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="bool" pass="reference" jni="jlong"
          cpp="bool*" returntype="bool&amp;">
          <jni2cpp>
            reinterpret_cast&lt;bool*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="bool" jni="jboolean">
          <jni2cpp>
            #jni_var# ? true : false
          </jni2cpp>
          <cpp2jni>
            #cpp_var# ? 1 : 0
          </cpp2jni>
        </type>

        <type meta="char" pass="pointer"
          jni="jlong" cpp="char*">
          <jni2cpp>
            reinterpret_cast&lt;char*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="char" pass="pointer" const="true"
          jni="jstring" cpp="char*">
          <pre_jni2cpp>
			std::string #cpp_var#_TMP; org::xbig::jni::to_stdstring(#jni_env#, #jni_var#, #cpp_var#_TMP);
          </pre_jni2cpp>
          <jni2cpp>
            #cpp_var#_TMP.c_str()
          </jni2cpp>
          <cpp2jni>
            org::xbig::jni::to_jstring(#jni_env#, #cpp_var#)
          </cpp2jni>
        </type>
        <type meta="char" pass="reference" jni="jlong"
          cpp="char*" returntype="char&amp;">
          <jni2cpp>
            reinterpret_cast&lt;char*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="char" jni="jchar" />

        <type meta="signed char" pass="pointer" const="true"
          jni="jlong" cpp="signed char*">
          <jni2cpp>
            reinterpret_cast&lt;signed char*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="signed char" jni="jbyte" />

        <type meta="unsigned char" pass="pointer" const="true"
          jni="jlong" cpp="unsigned char*">
          <jni2cpp>
            reinterpret_cast&lt;unsigned char*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="unsigned char" jni="jshort" />

        <type meta="short" pass="pointer" jni="jlong"
          cpp="short*">
          <jni2cpp>
            reinterpret_cast&lt;short*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="short" pass="reference" jni="jlong"
          cpp="short*" returntype="short&amp;">
          <jni2cpp>
            reinterpret_cast&lt;short*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="short" jni="jshort" />

				<type meta="short int" pass="pointer" jni="jlong"
							cpp="short int*">
					<jni2cpp>
						reinterpret_cast&lt;short int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="short int" pass="reference" jni="jlong"
							cpp="short int*" returntype="short int&amp;">
					<jni2cpp>
						reinterpret_cast&lt;short int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="short int" jni="jshort" />
				
        <type meta="signed short" pass="pointer" jni="jlong"
          cpp="signed short*">
          <jni2cpp>
            reinterpret_cast&lt;signed short*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="signed short" pass="reference" jni="jlong"
          cpp="signed short*" returntype="signed short&amp;">
          <jni2cpp>
            reinterpret_cast&lt;signed short*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="signed short" jni="jshort" />

				<type meta="signed short int" pass="pointer" jni="jlong"
							cpp="signed short int*">
					<jni2cpp>
						reinterpret_cast&lt;signed short int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="signed short int" pass="reference" jni="jlong"
							cpp="signed short int*" returntype="signed short int&amp;">
					<jni2cpp>
						reinterpret_cast&lt;signed short int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="signed short int" jni="jshort" />

        <type meta="unsigned short" pass="pointer" jni="jlong"
          cpp="unsigned short*">
          <jni2cpp>
            reinterpret_cast&lt;unsigned
            short*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="unsigned short" pass="reference" jni="jlong"
          cpp="unsigned short*" returntype="unsigned short&amp;">
          <jni2cpp>
            reinterpret_cast&lt;unsigned
            short*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="unsigned short" jni="jint" />

				<type meta="unsigned short int" pass="pointer" jni="jlong"
							cpp="unsigned short int*">
					<jni2cpp>
						reinterpret_cast&lt;unsigned short int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="unsigned short int" pass="reference" jni="jlong"
							cpp="unsigned short int*" returntype="unsigned short int&amp;">
					<jni2cpp>
						reinterpret_cast&lt;unsigned short int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="unsigned short int" jni="jint" />

        <type meta="int" pass="pointer" jni="jlong"
          cpp="int*">
          <jni2cpp>
            reinterpret_cast&lt;int*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="int" pass="reference" jni="jlong" cpp="int*"
          returntype="int&amp;">
          <jni2cpp>
            reinterpret_cast&lt;int*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="int" jni="jint" />

				<type meta="signed" pass="pointer" jni="jlong"
							cpp="signed*">
					<jni2cpp>
						reinterpret_cast&lt;signed*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="signed" pass="reference" jni="jlong"
							cpp="signed*" returntype="signed&amp;">
					<jni2cpp>
						reinterpret_cast&lt;signed*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="signed" jni="jint" />
				
        <type meta="signed int" pass="pointer" jni="jlong"
          cpp="signed int*">
          <jni2cpp>
            reinterpret_cast&lt;signed int*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="signed int" pass="reference" jni="jlong"
          cpp="signed int*" returntype="signed int&amp;">
          <jni2cpp>
            reinterpret_cast&lt;signed int*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="signed int" jni="jint" />

				<type meta="unsigned" pass="pointer" jni="jlong"
							cpp="unsigned*">
					<jni2cpp>
						reinterpret_cast&lt;unsigned*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="unsigned" pass="reference" jni="jlong"
							cpp="unsigned*" returntype="unsigned&amp;">
					<jni2cpp>
						reinterpret_cast&lt;unsigned*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="unsigned" jni="jlong" />

        <type meta="unsigned int" pass="pointer" jni="jlong"
          cpp="unsigned int*">
          <jni2cpp>
            reinterpret_cast&lt;unsigned int*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="unsigned int" pass="reference" jni="jlong"
          cpp="unsigned int*" returntype="unsigned int&amp;">
          <jni2cpp>
            reinterpret_cast&lt;unsigned int*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="unsigned int" jni="jlong" />

        <type meta="long" pass="pointer" jni="jlong"
          cpp="long*">
          <jni2cpp>
            reinterpret_cast&lt;long*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="long" pass="reference" jni="jlong"
          cpp="long*" returntype="long&amp;">
          <jni2cpp>
            reinterpret_cast&lt;long*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="long" jni="jlong" />

				<type meta="long int" pass="pointer" jni="jlong"
							cpp="long int*">
					<jni2cpp>
						reinterpret_cast&lt;long int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="long int" pass="reference" jni="jlong"
							cpp="long int*" returntype="long int&amp;">
					<jni2cpp>
						reinterpret_cast&lt;long int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="long int" jni="jlong" />

        <type meta="signed long" pass="pointer" jni="jlong"
          cpp="signed long*">
          <jni2cpp>
            reinterpret_cast&lt;signed long*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="signed long" pass="reference" jni="jlong"
          cpp="signed long*" returntype="signed long&amp;">
          <jni2cpp>
            reinterpret_cast&lt;signed long*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="signed long" jni="jlong" />

				<type meta="signed long int" pass="pointer" jni="jlong"
							cpp="signed long int*">
					<jni2cpp>
						reinterpret_cast&lt;signed long int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="signed long int" pass="reference" jni="jlong"
							cpp="signed long int*" returntype="signed long int&amp;">
					<jni2cpp>
						reinterpret_cast&lt;signed long int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="signed long int" jni="jlong" />

        <type meta="unsigned long" pass="pointer" jni="jlong"
          cpp="unsgined long*">
          <jni2cpp>
            reinterpret_cast&lt;unsigned
            long*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="unsigned long" pass="reference" jni="jlong"
          cpp="unsigned long*" returntype="unsigned long&amp;">
          <jni2cpp>
            reinterpret_cast&lt;unsigned
            long*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="unsigned long" jni="jlong" />

				<type meta="unsigned long int" pass="pointer" jni="jlong"
							cpp="unsgined long int*">
					<jni2cpp>
						reinterpret_cast&lt;unsigned long int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="unsigned long int" pass="reference" jni="jlong"
							cpp="unsigned long int*" returntype="unsigned long int&amp;">
					<jni2cpp>
						reinterpret_cast&lt;unsigned long int*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="unsigned long int" jni="jlong" />

				<type meta="long long" pass="pointer" jni="jlong"
							cpp="long long*">
					<jni2cpp>
						reinterpret_cast&lt;long long*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="long long" pass="reference" jni="jlong"
							cpp="long long*" returntype="long long&amp;">
					<jni2cpp>
						reinterpret_cast&lt;long long*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="long long" jni="jlong" />

				<type meta="signed long long" pass="pointer" jni="jlong"
							cpp="signed long long*">
					<jni2cpp>
						reinterpret_cast&lt;signed long long*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="signed long long" pass="reference" jni="jlong"
							cpp="signed long long*" returntype="signed long long&amp;">
					<jni2cpp>
						reinterpret_cast&lt;signed long long*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="signed long long" jni="jlong" />

				<type meta="unsigned long long" pass="pointer" jni="jlong"
							cpp="unsigned long long*">
					<jni2cpp>
						reinterpret_cast&lt;unsigned long long*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="unsigned long long" pass="reference" jni="jlong"
							cpp="unsigned long long*" returntype="unsigned long long&amp;">
					<jni2cpp>
						reinterpret_cast&lt;unsigned long long*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="unsigned long long" jni="jobject">
					<jni2cpp>
						org::xbig::jni::getShiftedULongLongValue(#jni_env#, #jni_var#)+9223372036854775808ULL
					</jni2cpp>
					<cpp2jni>
						#cpp_var#-9223372036854775808ULL
					</cpp2jni>
				</type>

        <type meta="double" pass="pointer" jni="jlong"
          cpp="double*">
          <jni2cpp>
            reinterpret_cast&lt;double*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="double" pass="reference" jni="jlong"
          cpp="double*" returntype="double&amp;">
          <jni2cpp>
            reinterpret_cast&lt;double*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="double" jni="jdouble" />

        <type meta="float" pass="pointer" jni="jlong"
          cpp="float*">
          <jni2cpp>
            reinterpret_cast&lt;float*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="float" pass="reference" jni="jlong"
          cpp="float*" returntype="float&amp;">
          <jni2cpp>
            reinterpret_cast&lt;float*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="float" jni="jfloat" />

        <type meta="std::string" pass="pointer" jni="jlong"
          cpp="std::string*">
          <jni2cpp>
            reinterpret_cast&lt;std::string*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="std::string" pass="reference" jni="jlong"
          cpp="std::string*" returntype="std::string&amp;">
          <jni2cpp>
            reinterpret_cast&lt;std::string*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="std::string" pass="reference" jni="jstring"
          cpp="std::string&amp;" returntype="std::string&amp;"
          const="true">
          <!-- copy const references of strings to allow usage of plain Strings in java (not StringPointer). -->
          <jni2cpp>
            ![CDATA[""; org::xbig::jni::to_stdstring(#jni_env#, #jni_var#, #cpp_var#); // calls c-tor only. Not operator= .]]
          </jni2cpp>
          <cpp2jni>
            org::xbig::jni::to_jstring(#jni_env#, #cpp_var#)
          </cpp2jni>
        </type>
        <type meta="std::string" jni="jstring">
          <jni2cpp>
            ![CDATA[""; org::xbig::jni::to_stdstring(#jni_env#, #jni_var#, #cpp_var#); // calls c-tor only. Not operator= .]]
          </jni2cpp>
          <cpp2jni>
            org::xbig::jni::to_jstring(#jni_env#, #cpp_var#)
          </cpp2jni>
        </type>

        <type meta="std::wstring" pass="pointer" jni="jlong"
          cpp="std::wstring*">
          <jni2cpp>
            reinterpret_cast&lt;std::wstring*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="std::wstring" pass="reference" jni="jlong"
          cpp="std::wstring*" returntype="std::wstring&amp;">
          <jni2cpp>
            reinterpret_cast&lt;std::wstring*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="std::wstring" pass="reference" jni="jstring"
          cpp="std::wstring&amp;" returntype="std::wstring&amp;"
          const="true">
          <jni2cpp>
            ![CDATA[(const wchar_t*)""; org::xbig::jni::to_stdwstring(#jni_env#, #jni_var#, #cpp_var#); // calls c-tor only. Not operator= .]]
          </jni2cpp>
          <cpp2jni>
            org::xbig::jni::to_jstring(#jni_env#, #cpp_var#)
          </cpp2jni>
        </type>
        <type meta="std::wstring" jni="jstring">
          <jni2cpp>
            ![CDATA[(const wchar_t*)""; org::xbig::jni::to_stdwstring(#jni_env#, #jni_var#, #cpp_var#); // calls c-tor only. Not operator= .]]
          </jni2cpp>
          <cpp2jni>
            org::xbig::jni::to_jstring(#jni_env#, #cpp_var#)
          </cpp2jni>
        </type>

        <type meta="size_t" pass="pointer" jni="jlong"
          cpp="size_t*">
          <jni2cpp>
            reinterpret_cast&lt;size_t*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="size_t" pass="reference" jni="jlong"
          cpp="size_t*" returntype="size_t&amp;">
          <jni2cpp>
            reinterpret_cast&lt;size_t*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="size_t" jni="jint" />
				
				<type meta="wchar_t" pass="pointer" jni="jlong"
							cpp="wchar_t*">
					<jni2cpp>
						reinterpret_cast&lt;wchar_t*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="wchar_t" pass="reference" jni="jlong"
							cpp="wchar_t*" returntype="wchar_t&amp;">
					<jni2cpp>
						reinterpret_cast&lt;wchar_t*&gt;(#jni_var#)
					</jni2cpp>
					<cpp2jni>
						reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
					</cpp2jni>
				</type>
				<type meta="wchar_t" jni="jchar" />

        <type meta="time_t" pass="pointer" jni="jlong"
          cpp="time_t*">
          <jni2cpp>
            reinterpret_cast&lt;time_t*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="time_t" pass="reference" jni="jlong"
          cpp="time_t*" returntype="time_t&amp;">
          <jni2cpp>
            reinterpret_cast&lt;time_t*&gt;(#jni_var#)
          </jni2cpp>
          <cpp2jni>
            reinterpret_cast&lt;jlong&gt;(&amp;#cpp_var#)
          </cpp2jni>
        </type>
        <type meta="time_t" jni="jlong" />

      </types>
    </jni>

    <format>
      <file>
        <header>
          &cppFileHeader;
        </header>
      </file>
    </format>
  </cpp>

  <java>
    <types>

      <type meta="void" java="void" genericParameter="void" />
      <type meta="bool" java="boolean" genericParameter="Boolean" />

      <type meta="char" java="short" genericParameter="Short" />
      <type meta="signed char" java="byte" genericParameter="Byte" />
      <type meta="unsigned char" java="short" genericParameter="Short" />

      <type meta="short" java="short" genericParameter="Short" />
      <type meta="short int" java="short" genericParameter="Short" />
      <type meta="signed short" java="short" genericParameter="Short" />
      <type meta="signed short int" java="short" genericParameter="Short" />
      <type meta="unsigned short" java="int" genericParameter="Integer" />
      <type meta="unsigned short int" java="int" genericParameter="Integer" />

      <type meta="int" java="int" genericParameter="Integer" />
      <type meta="signed" java="int" genericParameter="Integer" />
      <type meta="signed int" java="int" genericParameter="Integer" />
      <type meta="unsigned" java="long" genericParameter="Long" />
      <type meta="unsigned int" java="long" genericParameter="Long" />

      <type meta="long" java="long" genericParameter="Long" />
      <type meta="long int" java="long" genericParameter="Long" />
      <type meta="signed long" java="long" genericParameter="Long" />
      <type meta="signed long int" java="long" genericParameter="Long" />
      <type meta="unsigned long" java="long" genericParameter="Long" />
      <type meta="unsigned long int" java="long" genericParameter="Long" />
			
      <type meta="long long" java="long" genericParameter="Long" />
      <type meta="signed long long" java="long" genericParameter="Long" />
      <type meta="unsigned long long" java="ULongLong" genericParameter="ULongLong" />

      <type meta="double" java="double" genericParameter="Double" />
      <type meta="float" java="float" genericParameter="Float" />

      <type meta="std::string" java="String" genericParameter="String" />
      <type meta="std::wstring" java="String" genericParameter="String" />
      <type meta="size_t" java="int" genericParameter="Integer" />
      <type meta="wchar_t" java="char" genericParameter="Character" />
      <type meta="time_t" java="long" genericParameter="Long" />

    </types>

    <namespaces>
      <packageprefix>org</packageprefix>
      <rename package="ogre4j">Ogre</rename>
      <rename package="ogre4j.emittercommands">Ogre::EmitterCommands</rename>
      <rename package="ogre4j.overlayelementcommands">Ogre::OverlayElementCommands</rename>
    </namespaces>

    <nativelib>ogre4j</nativelib>

    <class>
      <pointer>org.xbig.base.InstancePointer</pointer>
      <inherits>org.xbig.base.NativeObject</inherits>
      <content>
        &javaClassContent;
      </content>
    </class>

    <interface>
      <prefix>I</prefix>
      <suffix></suffix>
    </interface>

    <constoverloading>
      <prefix></prefix>
      <suffix>_const</suffix>
    </constoverloading>

	<passObjectsReturnedByValueAsParameters>yes</passObjectsReturnedByValueAsParameters>
	<returnValueAsParameterName>returnValue</returnValueAsParameterName>

	<operators>
		<op javaName="operatorAddition">+</op>
		<op javaName="operatorSubtraction">-</op>
		<op javaName="operatorMultiplication">*</op>
		<op javaName="operatorDivision">/</op>
		<op javaName="operatorModulus">%</op>
		<op javaName="operatorBitwiseExclusiveOR">^</op>
		<op javaName="operatorBitwiseAND">&amp;</op>
		<op javaName="operatorBitwiseOR">|</op>
		<op javaName="operatorBitwiseComplement">~</op>
		<op javaName="operatorLogicalNegation">!</op>
		<op javaName="operatorAssignment">=</op>
		<op javaName="operatorLessThan">&lt;</op>
		<op javaName="operatorGreaterThan">&gt;</op>
		<op javaName="operatorIncrementAndAssign">+=</op>
		<op javaName="operatorDecrementAndAssign">-=</op>
		<op javaName="operatorMultiplyAndAssign">*=</op>
		<op javaName="operatorDivideAndAssign">/=</op>
		<op javaName="operatorModuloAndAssign">%=</op>
		<op javaName="operatorBitwiseExclusiveORAndAssign">^=</op>
		<op javaName="operatorBitwiseANDAndAssign">&amp;=</op>
		<op javaName="operatorBitwiseORAndAssign">|=</op>
		<op javaName="operatorLeftShift">&lt;&lt;</op>
		<op javaName="operatorRightShift">&gt;&gt;</op>
		<op javaName="operatorLeftShiftAndAssign">&lt;&lt;=</op>
		<op javaName="operatorRightShiftAndAssign">&gt;&gt;=</op>
		<op javaName="operatorEqual">==</op>
		<op javaName="operatorNotEqual">!=</op>
		<op javaName="operatorLessThanOrEqual">&lt;=</op>
		<op javaName="operatorGreaterThanOrEqual">&gt;=</op>
		<op javaName="operatorLogicalAnd">&amp;&amp;</op>
		<op javaName="operatorLogicalOr">||</op>
		<op javaName="operatorIncrement">++</op>
		<op javaName="operatorDecrement">--</op>
		<op javaName="operatorMemberPointerSelector">-&gt;*</op>
		<op javaName="operatorSequentialEvaluation">,</op>
		<op javaName="operatorMemberAccessFromAPointer">-&gt;</op>
		<op javaName="operatorIndex">[]</op>
		<op javaName="operatorFunctionCall">()</op>
	</operators>

	<format>
      <file>
        <header>
          &javaFileHeader;
        </header>
      </file>
    </format>

  </java>
</config>
