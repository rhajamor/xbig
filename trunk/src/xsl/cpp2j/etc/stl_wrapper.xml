<namespace name="std" fullName="std">

	<class name="vector" fullName="std::vector" template="true">
		<templateparameters>
			<templateparameter templateType="class" templateDeclaration="T"/>
		</templateparameters>

		<additionalInfo>
			<info name="value_type" typeParaPos="1"/>
			<info name="pointer" typeParaPos="1" changePassedBy="true" newPassedBy="pointer"/>
		</additionalInfo>

		<includes local="no">vector</includes>
<!-- 
		<class name="iterator" fullName="std::vector::iterator">
			<function virt="non-virtual" visibility="public" static="false" const="false"
						passedBy="value">
				<name>iterator</name>
				<definition>std::vector::iterator::iterator</definition>
			</function>
		</class>
 -->
		<function virt="non-virtual" visibility="public" static="false" const="false"
                   passedBy="value">
            <name>vector</name>
            <definition>std::vector::vector</definition>
         </function>
<!-- 
		<function virt="non-virtual" visibility="public" static="false" const="false"
                   passedBy="value">
            <name>vector</name>
            <definition>std::vector::vector</definition>
			<parameters>
				<parameter passedBy="reference">
					<type const="true">vector&lt;T&gt;</type>
					<name>c</name>
				</parameter>
			</parameters>
         </function>
 -->
		<function virt="non-virtual" visibility="public" static="false" const="false"
                   passedBy="value">
            <name>vector</name>
            <definition>std::vector::vector</definition>
			<parameters>
				<parameter passedBy="value">
					<type const="false">size_t</type>
					<name>num</name>
				</parameter>
				<parameter passedBy="reference">
					<type const="true">T</type>
					<name>val</name>
				</parameter>
			</parameters>
         </function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>void</type>
			<definition>void std::vector::assign</definition>
			<name>assign</name>
			<parameters>
				<parameter passedBy="value">
					<type const="false">size_t</type>
					<name>num</name>
				</parameter>
				<parameter passedBy="value">
					<type const="true">T</type>
					<name>val</name>
				</parameter>
			</parameters>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="reference">
			<type>T</type>
			<definition>T&amp; std::vector::at</definition>
			<name>at</name>
			<parameters>
				<parameter passedBy="value">
					<type const="false">size_t</type>
					<name>loc</name>
				</parameter>
			</parameters>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="reference">
			<type>T</type>
			<definition>T std::vector::back</definition>
			<name>back</name>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>size_t</type>
			<definition>size_t std::vector::capacity</definition>
			<name>capacity</name>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>void</type>
			<definition>void std::vector::clear</definition>
			<name>clear</name>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>bool</type>
			<definition>bool std::vector::empty</definition>
			<name>empty</name>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="reference">
			<type>T</type>
			<definition>T std::vector::front</definition>
			<name>front</name>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>size_t</type>
			<definition>size_t std::vector::max_size</definition>
			<name>max_size</name>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>void</type>
			<definition>void std::vector::pop_back</definition>
			<name>pop_back</name>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>void</type>
			<definition>void std::vector::push_back</definition>
			<name>push_back</name>
			<parameters>
				<parameter passedBy="reference">
					<type const="true">T</type>
					<name>val</name>
				</parameter>
			</parameters>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>void</type>
			<definition>void std::vector::reserve</definition>
			<name>reserve</name>
			<parameters>
				<parameter passedBy="value">
					<type const="true">size_t</type>
					<name>size</name>
				</parameter>
			</parameters>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>void</type>
			<definition>void std::vector::resize</definition>
			<name>resize</name>
			<parameters>
				<parameter passedBy="value">
					<type const="false">size_t</type>
					<name>num</name>
				</parameter>
			</parameters>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>void</type>
			<definition>void std::vector::resize</definition>
			<name>resize</name>
			<parameters>
				<parameter passedBy="value">
					<type const="false">size_t</type>
					<name>num</name>
				</parameter>
				<parameter passedBy="reference">
					<type const="true">T</type>
					<name>val</name>
				</parameter>
			</parameters>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<type>size_t</type>
			<definition>size_t std::vector::size</definition>
			<name>size</name>
		</function>

	</class>

	<class name="map" fullName="std::map" template="true">
		<templateparameters>
			<templateparameter templateType="class" templateDeclaration="K"/>
			<templateparameter templateType="class" templateDeclaration="V"/>
		</templateparameters>

		<additionalInfo>
			<info name="key_type" typeParaPos="1"/>
			<info name="mapped_type" typeParaPos="2"/>
		</additionalInfo>

		<includes local="no">map</includes>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<name>map</name>
			<definition>std::map::map</definition>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<name>clear</name>
			<type>void</type>
			<definition>std::map::clear</definition>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<name>count</name>
			<type>size_t</type>
			<definition>std::map::count</definition>
			<parameters>
				<parameter passedBy="reference">
					<type const="true">K</type>
					<name>key</name>
				</parameter>
			</parameters>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="true"
					passedBy="value">
			<name>empty</name>
			<type>bool</type>
			<definition>std::map::empty</definition>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<name>erase</name>
			<type>size_t</type>
			<definition>std::map::erase</definition>
			<parameters>
				<parameter passedBy="reference">
					<type const="true">K</type>
					<name>key</name>
				</parameter>
			</parameters>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="true"
					passedBy="value">
			<name>max_size</name>
			<type>size_t</type>
			<definition>std::map::max_size</definition>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="true"
					passedBy="value">
			<name>size</name>
			<type>size_t</type>
			<definition>std::map::size</definition>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="reference">
			<name>get</name>
			<type>V</type>
			<definition>std::map::get</definition>
			<parameters>
				<parameter passedBy="reference">
					<type const="false">K</type>
					<name>key</name>
				</parameter>
			</parameters>
			<jniImplementation>
				#nl#// parameter conversions
				#cpp_conversions#
				#nl#
				#nl#// cast pointer to C++ object
				#nl##cpp_class#* #cpp_this# =
				reinterpret_cast&lt;#cpp_class#*&gt;(#jni_pointer#);
				#nl#
				#nl#// call library method
				#nl##cpp_return_type# #cpp_return_var# =
				    &amp; (*#cpp_this#)[#cpp_params#]#optional_closing_bracket#;
				#nl#return #cpp_return#;
			</jniImplementation>
		</function>

		<function virt="non-virtual" visibility="public" static="false" const="false"
					passedBy="value">
			<name>insert</name>
			<type>void</type>
			<definition>std::map::insert</definition>
			<parameters>
				<parameter passedBy="reference">
					<type const="false">K</type>
					<name>key</name>
				</parameter>
				<parameter passedBy="reference">
					<type const="false">V</type>
					<name>value</name>
				</parameter>
			</parameters>
			<jniImplementation>
				#nl#// parameter conversions
				#cpp_conversions#
				#nl#
				#nl#// cast pointer to C++ object
				#nl##cpp_class#* #cpp_this# =
				reinterpret_cast&lt;#cpp_class#*&gt;(#jni_pointer#);
				#nl#
				#nl#// call library method
				#nl##cpp_this#->insert(make_pair(#cpp_params#));
			</jniImplementation>
		</function>

	</class>

</namespace>
