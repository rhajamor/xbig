1 Dependencies
----------------

1.1 Java
----------
XBiG makes use of new features like generics introduced with JavaVM
1.5. Therefore you will need JDK5 or higher. Get the latest version from
http://java.sun.com/javase/downloads/ and follow the installation
instruction for your platform.

1.2 ANT
---------
XBiG uses ANT to build itself and to generate the bindings. Get the
latest ANT version from http://ant.apache.org/ and follow the
installation instructions for your platform.

1.3 Doxygen
-----------
XBiG uses the source code documentation tool Doxygen to analyse the 
source library. Doxygen has already support for several languages and
creates an XML notation of the library interfaces. Get the latest
version from http://www.stack.nl/~dimitri/doxygen/ and follow the
installation instructions for your platform.

2 Configuration
-----------------

2.1 CPP Compiler
----------------
Open the file XBiG/src/ant/config/config_cpp.xml and set the following
properties to match your platform:
    cpp.compiler = msvc|g++
    cpp.platform = win32|linux
see http://ant-contrib.sourceforge.net/cc.html for more supported compilers.

2.2 Doxygen
-----------
Open the file XBiG/src/ant/config/config_doxygen.xml and set the property
path.doxygen.bin to "installdir/doxygen/bin/doxygen.exe". You can set that 
property to "doxygen" and add it to your PATH environment variable.

2.3 Environment variables
--------------------------
- JAVA_HOME must point to the location of your JDK, that is needed to find jni.h.
- PATH must contain javac, your C++ compiler and (maybe) doxygen (see above).

3 Run a test
------------
If you have installed all necessary dependencies and configured XBiG
then you are ready to run one or all of the tests in the test suite.
Change into the directory XBiG/tests/t1 and run ant with the parameter
"-lib ../../src/ant/jar/" to point to the libraries needed (on *NIX use the run.sh script).
To run all tests use XBiG/tests/build for your OS.

The build of a test includes the following steps:
0. Build XBiG base library (only t1)
1. Build of the source library (C++)
2. Generation of the meta layer with doxygen and XSLT
3. Generation of the Java and C++ code for the JNI bindings
4. Build of the JNI bindings.
5. Run of a JUnit test for the generated bindings.

At least you should see the message "BUILD SUCCESSFUL". If the
build was successful you are ready to create a project for the
library you want to generate bindings. Ohterwise something went
wrong and you have to check your environment and configuration.

4 Setup an own project
---------------------
more to come...

-----

Copyright (c) 2006 The XBiG Development Team

This file is part of XBiG (The XSLT Bindings Generator)

XBiG is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

XBiG is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with XBiG; see the file COPYING.  If not, write to
the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.
